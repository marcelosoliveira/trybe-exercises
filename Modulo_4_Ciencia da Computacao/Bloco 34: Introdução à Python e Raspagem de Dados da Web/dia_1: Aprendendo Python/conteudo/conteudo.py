fruits = ["orange", "apple", "grape", "pineapple"]  # elementos s√£o definidos separados por v√≠rgula, envolvidos por colchetes

fruits[0]  # o acesso √© feito por indices iniciados em 0

fruits[-1]  # o acesso tamb√©m pode ser negativo

fruits.append("banana")  # adicionando uma nova fruta

fruits.remove("pineapple")  # removendo uma fruta

fruits.extend(["pear", "melon", "kiwi"])  # acrescenta uma lista de frutas a lista original

fruits.index("apple")  # retorna o √≠ndice onde a fruta est√° localizada, neste caso 1 em seu programa
fruits.sort()  # ordena a lista de frutas

""" Tuplas (tuple)
S√£o similares a listas, por√©m n√£o podem ser modificados durante a execu√ß√£o do programa.
Sintaxe:
Copiar """
user = ("C√°ssio", "Botaro", 42)  # elementos s√£o definidos separados por v√≠rgula, envolvidos por parenteses

user[0]  # acesso tamb√©m por √≠ndices

""" Conjuntos (set)
Conjunto de elementos √∫nicos e n√£o ordenados. Como conjuntos, implementam opera√ß√µes de uni√£o, intersec√ß√£o e outras.
Sintaxe:
Copiar """
permissions = {"member", "group"}  # elementos separados por v√≠rgula, envolvidos por chaves

permissions.add("root")  # adiciona um novo elemento ao conjunto

permissions.add("member")  # como o elemento j√° existe, nenhum novo item √© adicionado ao conjunto

permissions.union({"user"})  # retorna um conjunto resultado da uni√£o

permissions.intersection({"user", "member"})  # retorna um conjunto resultante da intersec√ß√£o dos conjuntos

permissions.difference({"user"})  # retorna a diferen√ßa entre os dois conjuntos


""" Conjuntos imut√°veis (frozenset)
Varia√ß√£o do set, por√©m imut√°vel, ou seja, seus elementos n√£o podem ser modificados durante a execu√ß√£o do programa.
Sintaxe:
Copiar """
permissions = frozenset(["member", "group"])  # assim como o set, qualquer estrutura iter√°vel pode ser utilizada para criar um frozenset

permissions.union({"user"})  # novos conjuntos imut√°veis podem ser criados √† partir do original, mas o mesmo n√£o pode ser modificado

permissions.intersection({"user", "member"})  # retorna um conjunto resultante da intersec√ß√£o dos conjuntos

permissions.difference({"user"})  # retorna a diferen√ßa entre os dois conjuntos


""" Dicion√°rios (dict)
Estrutura que associa uma chave a um determinado valor. √â a representa√ß√£o do t√£o famoso objeto que utilizamos em JavaScript.
Sintaxe:
Copiar """
people_by_id = {1: "C√°ssio", 2: "Jo√£o", 3: "Felipe"}  # elementos no formato "chave: valor" separados por v√≠rgula, envolvidos por chaves

people_by_name = {"C√°ssio": 1, "Jo√£o": 2, "Felipe": 3}  # outro exemplo, dessa vez usando strings como chaves (ao contr√°rio de JS, as aspas duplas s√£o obrigat√≥rias)

# elementos s√£o acessados por suas chaves
people_by_id[1]  # sa√≠da: C√°ssio

# elementos podem ser removidos com a palavra chave del
del people_by_id[1]
people_by_id.items()  # dict_items([(1, "C√°ssio"), (2, "Jo√£o"), (3, "Felipe")])
# um conjunto √© retornado com tuplas contendo chaves e valores
""" 
amos fixar os aprendizados sobre dicts?
Utilizando o c√≥digo abaixo, fa√ßa os exerc√≠cios de fixa√ß√£o 8, 9 e 10:
Copiar """
info = {
  "personagem": "Margarida",
  "origem": "Pato Donald",
  "nota": "Namorada do personagem principal nos quadrinhos do Pato Donald",
}

""" Range (range)
Estrutura capaz de gerar uma sequ√™ncia num√©rica de um valor inicial at√© um valor final, modificando seu valor de acordo com o passo ( step ) definido. Pode ser declarado como range( [start], stop[, step] ) , em que start e step podem ser omitidos, possuindo valores iniciais iguais a 0 e 1 respectivamente.
Um ponto de aten√ß√£o √© que o stop n√£o √© inclu√≠do na sequ√™ncia, portanto caso queira uma sequ√™ncia de 1 at√© 10 a chamada dever√° ser range(1, 11)
Seus valores s√£o criados a medida que esta sequ√™ncia √© percorrida.
Sintaxe:
Copiar """
# vamos converter o range em uma lista para ajudar na visualiza√ß√£o

# definimos somente o valor de parada
list(range(5))  # sa√≠da: [0, 1, 2, 3, 4]

# definimos o valor inicial e o de parada
list(range(1, 6))  # sa√≠da: [1, 2, 3, 4, 5]

# definimos valor inicial, de parada e modificamos o passo para 2
list(range(1, 11, 2))  # sa√≠da: [1, 3, ,5 ,7 , 9]

# podemos utilizar valores negativos para as entradas tamb√©m
list(range(10, 0, -1))  # sa√≠da: [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]

""" Al√©m dos tipos b√°sicos, temos outros como datas, tuplas nomeadas, arrays, enumera√ß√µes e outros, mas estes tem de ser importados de seus respectivos m√≥dulos.
Exerc√≠cio 12: Ap√≥s uma consulta do banco de dados, temos linhas que cont√©m nome, sobrenome e idade como: "Thiago", "Nobre", 29 . Que estrutura vista anteriormente seria recomendada dado que ap√≥s esta consulta somente exibimos estes valores.
Exerc√≠cio 13: Realizar a contagem de quantas vezes cada elemento aparece em uma sequ√™ncia √© uma t√©cnica muito √∫til na solu√ß√£o de alguns problemas. Qual √© a estrutura mais recomendada para o armazenamento desta contagem? """


"""  Em uma an√°lise de dados sobre pessoas desenvolvedoras, temos uma base de dados que cont√©m o sal√°rio de v√°rias pessoas, por√©m n√£o temos informa√ß√£o da senioridade das mesmas. Para fazer um agrupamento por senioridade precisamos criar uma nova coluna que ser√° baseada no sal√°rio.
Caso o sal√°rio seja menor que "R$2.000,00", a pessoa ser√° considerada como estagi√°ria, para sal√°rios entre R$2.000,00 e R$5.800,00 j√∫nior, entre R$5.800,00 e R$7.500,00 pleno, entre R$7.500,00 e R$10.500,00 ser√° s√™nior e qualquer valor acima disto consideraremos l√≠der.
Copiar """
position = ""
if salary <= 2000:
    position = "estagi√°rio"
elif 2000 < salary <= 5800:
    position = "j√∫nior"
elif 5800 < salary <= 7500:
    position = "pleno"
elif 7500 < salary <= 10500:
    position = "senior"
else:
    position = "l√≠der"


""" Em alguns casos, que n√£o prejudiquem a legibilidade, podemos criar estruturas de mapeamento ( dicts ) para simplificar o aninhamento de condicionais.
Copiar """
key = "id"
from_to = {
    "id": "identifier",
    "mail": "email",
    "lastName": "last_name",
}
from_to[key]


""" Pense em um sistema que fa√ßa a listagem de restaurantes. Estes restaurantes possuem uma nota proveniente da avalia√ß√£o dos seus clientes.
Copiar """
restaurants = [
    {"name": "Restaurante A", "nota": 4.5},
    {"name": "Restaurante B", "nota": 3.0},
    {"name": "Restaurante C", "nota": 4.2},
    {"name": "Restaurante D", "nota": 2.3},
]


""" Quando um cliente pede a listagem de restaurantes, ele pode escolher filtrar o resultado de acordo com a nota.
Podemos fazer isto percorrendo a lista de restaurantes, criando uma nova lista com somente aqueles que atendem ao filtro.
Copiar """
filtered_restaurants = []
min_rating = 3.0
for restaurant in restaurants:
    if restaurant["nota"] > min_rating:
        filtered_restaurants.append(restaurant)
print(filtered_restaurants)  # imprime a lista de restaurantes, sem o B e D


""" Dado que a maior parte do tempo estamos percorrendo estruturas, os criadores da linguagem decidiram que o for each seria o la√ßo de repeti√ß√£o principal na linguagem.
Para cada repeti√ß√£o do nosso la√ßo, um novo elemento da estrutura iter√°vel √© atribu√≠do a vari√°vel de itera√ß√£o. No exemplo acima vemos que, a cada itera√ß√£o, um novo restaurante √© colocado na vari√°vel restaurant .
üí° Em alguns casos, ainda podemos querer percorrer uma sequ√™ncia num√©rica, e para isto iteramos sobre a estrutura de dados range .
Copiar """
for index in range(5):
    print(index)



""" compreens√£o de listas
Existe uma maneira mais "pyth√¥nica" de se fazer isto! üêç
Quando uma nova lista √© criada como resultado de uma itera√ß√£o, podemos simplificar utilizando compreens√£o de listas .
Copiar """
min_rating = 3.0
filtered_restaurants = [restaurant
                         for restaurant in restaurants
                         if restaurant["nota"] > min_rating]
print(filtered_restaurants)  # imprime a lista de restaurantes, sem o B e D

""" A compreens√£o de listas √© declarada da mesma maneira que uma lista comum, por√©m no lugar dos elementos n√≥s colocamos a itera√ß√£o que ir√° gerar os elementos da nova lista. Um detalhe importante √© que √© poss√≠vel filtrar esses elementos utilizando o if .
Poder√≠amos listar tamb√©m somente o nome dos restaurantes.
Copiar """
# min_rating = 3.0
filtered_restaurants = [restaurant["name"] ] # aqui pedimos somente o nome do restaurante
#                        for restaurant in restaurants
#                        if restaurant["nota"] > min_rating]
# print(filtered_restaurants)  # imprime a lista de restaurantes, sem o B e D



""" while
üî¢ A Sequ√™ncia de Fibonacci, muito presente em diversas formas na natureza, √© uma sequ√™ncia num√©rica come√ßando por 0 e 1 e cada termo subsequente corresponde √† soma dos dois anteriores.
Podemos escrever esta sequ√™ncia da seguinte maneira:
Copiar """
n = 10
last, next = 0, 1
while last < n:
    print(last)
    last, next = next, last + next

""" 
    Notamos que fun√ß√µes s√£o definidas atrav√©s da palavra reservada def , seguido por um nome e os par√¢metros entre parenteses. Como todo bloco de c√≥digo em Python o caractere : define o in√≠cio do bloco e a indenta√ß√£o seu fim.
Os par√¢metros podem ser passados de forma posicional ou nomeada. Os posicionais s√£o aqueles definidos atrav√©s da posi√ß√£o ao qual √© chamado e os nomeados s√£o definidos atrav√©s do nome.
Copiar """
def soma(x, y):
    return x + y

soma(2, 2)  # os par√¢metros aqui s√£o posicionais

soma(x=2, y=2)  # aqui estamos nomeando os par√¢metros


""" Os par√¢metros tamb√©m podem ser vari√°dicos. Ou seja, podem variar em sua quantidade. Par√¢metros posicionais vari√°dicos s√£o acessados como tuplas no interior de uma fun√ß√£o e par√¢metros nomeados vari√°dicos como dicion√°rio.
Copiar """
def concat(*strings):
    # Equivalente a um ", ".join(strings), que concatena os elementos de um iter√°vel em uma string utilizando um separador
    # Nesse caso a string resultante estaria separada por v√≠rgula
    final_string = ""
    for string in strings:
        final_string += string
        if not string == strings[-1]:
            final_string += ', '
    return final_string

# pode ser chamado com 2 par√¢metros
concat("Carlos", "Jo√£o")  # sa√≠da: "Carlos, Jo√£o"

# pode ser chamado com um n√∫mero n de par√¢metros
concat("Carlos", "Jo√£o", "Maria")  # sa√≠da: "Carlos, Jo√£o, Maria"

# dict √© uma fun√ß√£o que j√° vem embutida no python
dict(nome="Felipe", sobrenome="Silva", idade=25)  # cria um dicion√°rio utilizando as chaves passadas

dict(nome="Ana", sobrenome="Souza", idade=21, turma=1)  # o n√∫mero de par√¢metros passados para a fun√ß√£o pode variar


""" Vari√°veis definidas dentro das fun√ß√µes tem escopo local, por√©m uma fun√ß√£o quando n√£o encontra um nome no escopo local ir√° procurar no espa√ßo de nomes global.
Em alguns casos, podemos querer limitar um par√¢metro em nomeado ou posicional para evitar ambiguidades e/ou aumentar legibilidade.
Copiar """
len([1, 2, 3, 4])  # fun√ß√£o len n√£o aceita argumentos nomeados

len(obj=[1, 2, 3, 4])  # este c√≥digo ir√° falhar

print("Botaro", "C√°ssio", ", ")  # imprime Botaro C√°ssio ,

print("Botaro", "C√°ssio", sep=", ")  # nomeando o terceiro par√¢metro, agora temos a sa√≠da: Botaro, C√°ssio


PI = 3.14  # PI √© uma "constante" em nosso m√≥dulo


def square(side):
    '''Calculate area of square.'''
    return side * side


def rectangle(length, width):
    '''Calculate area of rectangle.'''
    return length * width


def circle(radius):
    '''Calculate area of circle.'''
    return PI * radius * radius


print("√Årea do quadrado:", square(10))
print("√Årea do ret√¢ngulo:", rectangle(2, 2))
print("√Årea do c√≠rculo:", circle(3))


import area


PEOPLE_AT_CONCERT_PER_SQUARE_METER = 2  # numero de pessoas por metro quadrado em m√©dia
FIELD_LENGTH = 240  # em metros
FIELD_WIDTH = 45  # em metros
PEOPLE_AT_CONCERT = area.rectangle(FIELD_LENGTH, FIELD_WIDTH) // PEOPLE_AT_CONCERT_PER_SQUARE_METER


print("Est√£o presentes no show aproximadamente", PEOPLE_AT_CONCERT, "pessoas")


# ...


if __name__ == "__main__":
    print("√Årea do quadrado:", square(10))
    print("√Årea do ret√¢ngulo:", rectangle(2, 2))
    print("√Årea do c√≠rculo:", circle(3))


""" Voc√™ deve estar pensando agora: "Socorro! Acho que n√£o vou conseguir me lembrar de tudo o que vi, posso acabar me confundindo com outras linguagens.".
Ent√£o vou te dar um conselho! Sempre que estiver programando e surgir alguma d√∫vida, abra o terminal interativo e verifique o que est√° fazendo. Ele pode ser seu aliado, e pode inclusive te dar uma ajuda quando for necess√°rio.
Temos um comando que chama help , e ele pode ser utilizado at√© mesmo em em cl√°usulas if ou for , desde que colocado entre aspas.
Copiar """
help("if")
""" A tecla q deve ser apertada para sair da ajuda.
Experimente tamb√©m para fun√ß√µes como abs ou len que s√£o padr√µes da linguagem. E para a fun√ß√£o sin que est√° presente no m√≥dulo math que j√° vem embutido.
Copiar
import math """

help(abs)

help(len)

help(math.sin)
