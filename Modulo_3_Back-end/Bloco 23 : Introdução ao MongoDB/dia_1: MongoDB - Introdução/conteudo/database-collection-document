//Databases, Coleções e Documentos
//O MongoDB armazena documentos BSON dentro de coleções e coleções dentro de databases .

use meuBanco
db.minhaColecao1.insertOne( { x: 1 })

db.minhaColecao2.insertOne({ x: 1 })
db.minhaColecao3.createIndex({ y: 1 })

db.createCollection( "minhaColecao4", { collation: { locale: "fr" } } );

{
    "_id": 1,
    "nome": "Jose",
    "endereco": {
        "logradouro": "Rua 1",
        "cidade": "São Paulo",
        "uf": "SP"
    }
},
{
    "_id": 2,
    "nome": "Maria",
    "endereco": {
        "logradouro": "Rua 2",
        "cidade": "Belo Horizonte",
        "uf": "MG"
    }
}

// Insert

/* insertOne()
Veja este vídeo e entenda um pouco mais sobre o insertOne .
 */

 {
    "productName": "Caixa",
    "price": 20
}

[
    { "productName": "Lapis", "stock": 10, "price": 20,"status":"A"},
    { "productName": "Tesoura", "price": 5, "status": "B" },
    { "productName": "Borracha", "price": 15, "status": "A" }
]

/* db.collection.find()
Após inserir documentos em seu banco de dados, você com certeza vai querer recuperá-los! Assim como nos bancos de dados relacionais, no MongoDB temos um método específico para essa operação: o find() . */


Parâmetros do find()
db.collection.find(query, projection)
O método find() serve para selecionar os documentos de uma coleção ou de uma view e retorna um cursor com esses documentos.
Esse método recebe dois parâmetros:
query :
Tipo: Documento;
Descrição: Opcional. Especifica os filtros da seleção usando os query operators . Para retornar todos os documentos da coleção, é só omitir esse parâmetro ou passar um documento vazio ({}).
projection :
Tipo: Documento;
Descrição: Opcional. Especifica quais campos serão retornados nos documentos selecionados pela query . Para retornar todos os campos desses documentos, é só omitir esse parâmetro.
Esse método retorna um cursor para os documentos que correspondem aos critérios de consulta.

Projeção (projection)
O parâmetro projection determina quais campos serão retornados dos documentos que atendam aos critérios de filtro. O formato recebido por ele é algo como:
Copiar
{ "campo1": <valor>, "campo2": <valor> ... }
O <valor> pode ser um dos seguintes:
1 ou true para incluir um campo nos documentos retornados;
0 ou false para excluir um campo;
Uma expressão usando Projection Operators .
Você pode escolher exibir no resultado da query apenas certos campos, sem a necessidade de exibir sempre todos os campos dos documentos.
A projeção é sempre o segundo parâmetro do método find() .
Veja só este exemplo:
Copiar
db.movies.insertOne(
    {
        "title" : "Forrest Gump",
        "category" : [ "drama", "romance" ],
        "imdb_rating" : 8.8,
        "filming_locations" : [
            { "city" : "Savannah", "state" : "GA", "country" : "USA" },
            { "city" : "Monument Valley", "state" : "UT", "country" : "USA" },
            { "city" : "Los Anegeles", "state" : "CA", "country" : "USA" }
        ],
        "box_office" : {
            "gross" : 557, "opening_weekend" : 24, "budget" : 55
        }
    }
)
A operação acima insere um documento na coleção movies com vários campos. Com a operação abaixo, selecionamos esse documento na coleção movies , passando como parâmetro de projeção apenas os campos title e imdb_rating :
Copiar
db.movies.findOne(
    { "title" : "Forrest Gump" },
    { "title" : 1, "imdb_rating" : 1 }
)
Como resultado, teremos o seguinte:
Copiar
{
    "_id" : ObjectId("5515942d31117f52a5122353"),
    "title" : "Forrest Gump",
    "imdb_rating" : 8.8
}
Note que o campo _id também foi retornado. Isso acontece porque ele é o único campo que você não precisa especificar para que seja retornado. Se você não quiser vê-lo no retorno, é só suprimi-lo da seguinte forma:
Copiar
db.movies.findOne(
    { "title" : "Forrest Gump" },
    { "title" : 1, "imdb_rating" : 1, "_id": 0 }
)
© Trybe 2020
·
Manual da Pessoa Estudante


Gerenciamento do cursor
Ao executar o método db.collection.find() , o mongo itera automaticamente o cursor para exibir os 20 primeiros documentos. Digite it para continuar a iteração. Assim, mais 20 documentos serão exibidos até o final do cursor.
Um método bastante interessante que é utilizado num cursor é o count() . O método count() retorna o número de documentos de uma coleção, e também pode receber um critério de seleção para retornar apenas o número de documentos que atendam a esse critério.
Você pode retornar o número de documentos de uma coleção com a seguinte operação:
Copiar
db.movies.count()
Veremos adiante mais utilizações para o método count() .
© Trybe 2020
·
Manual da Pessoa Estudante


Tipos e comparações
O MongoDB trata alguns tipos de dados como equivalentes para fins de comparação. Por exemplo, tipos numéricos sofrem conversão antes da comparação. No entanto, para a maioria dos tipos de dados, os operadores de comparação realizam comparações apenas em documentos em que o tipo BSON do campo destino do documento corresponde ao tipo do operando da query.
Para compreender melhor esse conceito, veja o exemplo abaixo, considerando a seguinte coleção:
Copiar
{ "_id": "apples", "qty": 5 }
{ "_id": "bananas", "qty": 7 }
{ "_id": "oranges", "qty": { "in stock": 8, "ordered": 12 } }
{ "_id": "avocados", "qty": "fourteen" }
A query abaixo usa o operador de comparação $gt( greater than , maior que, >) para retornar os documentos em que o valor do campo qty seja maior do que 4 :
Copiar
db.collection.find( { qty: { $gt: 4 } } )
A query trará como retorno os seguintes documentos:
Copiar
{ "_id": "apples", "qty": 5 }
{ "_id": "bananas", "qty": 7 }
O documento com o _id igual a "avocados" não foi retornado porque o valor do campo qty é do tipo string , enquanto o operador $gt é do tipo integer .
O documento com o _id igual a "oranges" também não foi retornado porque qty é do tipo object .
Nesses casos, vemos o schemaless funcionando na prática!
© Trybe 2020
·
Manual da Pessoa Estudante


Utilizando o find()
Exemplos
Para esses exemplos você vai utilizar os documentos de uma coleção chamada bios . Caso você queira executar os exemplos localmente, copie o snippet e execute no seu cliente para inserir essa coleção em sua instância local do MongoDB .
Os documentos dessa coleção de maneira geral têm esse formato:
Copiar
{
    "_id" : <value>,
    "name" : { "first" : <string>, "last" : <string> },       // documento embedado ou subdocumento
    "birth" : <ISODate>,
    "death" : <ISODate>,
    "contribs" : [ <string>, ... ],                           // Array de Strings
    "awards" : [
        { "award" : <string>, year: <number>, by: <string> }  // Array de subdocumentos
        ...
    ]
}
© Trybe 2020
·
Manual da Pessoa Estudante

Selecionando todos os documentos da coleção
O método find() , quando utilizado sem parâmetros, retorna todos os documentos da coleção juntamente com todos os seus campos. Por exemplo, a operação abaixo retorna todos os documentos da coleção bios :
Copiar
db.bios.find()
Essa operação corresponde à seguinte query SQL :
Copiar
SELECT * FROM bios;
© Trybe 2020
·
Manual da Pessoa Estudante


Selecionando documentos com critérios de busca
Query por igualdade
A operação abaixo retorna os documentos da coleção bios em que o campo _id é igual a 5 :
Copiar
db.bios.find( { _id: 5 } )
Essa operação corresponde à seguinte declaração SQL :
Copiar
SELECT * FROM bios WHERE _id = 5;
Agora, a operação abaixo retorna todos os documentos da coleção bios em que o campo last do subdocumento name é igual a "Hopper" :
Copiar
db.bios.find( { "name.last": "Hopper" } )
Note que, para acessar campos em subdocumentos, utilizamos dot notation (por exemplo, "sub-documento.campo" ).
© Trybe 2020
·
Manual da Pessoa Estudante

Projetando somente os campos requeridos:
Através do segundo parâmetro do método find() , podemos especificar quais campos serão retornados. O exemplo abaixo retorna todos os documentos da coleção bios, trazendo apenas o campo name de cada documento, que é um subdocumento:
Copiar
db.bios.find({}, { name: 1 })
Essa operação corresponde à seguinte query SQL :
Copiar
SELECT name FROM bios;
Procure utilizar a projeção para diminuir a quantidade de campos retornados pelo cursor. Isso ajuda muito no que se refere ao tráfego desses dados na rede!
© Trybe 2020
·
Manual da Pessoa Estudante

Limitando o número de documentos retornados
cursor.limit()
Você pode limitar o número de documentos retornados por uma query utilizando o método limit() . Esse método é semelhante à declaração LIMIT em um banco de dados SQL . Uma utilização comum do limit() é para maximizar a performance e evitar que o MongoDB retorne mais resultados do que o necessário para o processamento.
O método cursor.limit() é utilizado da seguinte forma:
Copiar
db.collection.find(<query>).limit(<número>)
Note que você deve especificar um valor numérico para o limit() .
Um exemplo utilizando a coleção bios:
Copiar
db.bios.find().limit(5)
A operação acima retornará os cinco primeiros documentos da coleção bios.
Essa operação corresponde à seguinte query SQL :
Copiar
SELECT * FROM bios LIMIT 5;
cursor.pretty()
Com o método pretty() , você pode deixar os resultados exibidos no shell um pouco mais legíveis. Esse método aplica uma indentação na exibição dos resultados no console, de forma que fica bem melhor de ler!
Exemplo de utilização do método pretty() , usando a coleção bios:
Copiar
db.bios.find().limit(5).pretty()
Utilize o método pretty() à vontade!
© Trybe 2020
·
Manual da Pessoa Estudante


"Pulando" documentos
cursor.skip(número)
Acione o método cursor.skip() para controlar a partir de que ponto o MongoDB começará a retornar os resultados. Essa abordagem pode ser bastante útil para realizar paginação dos resultados.
O método cursor.skip() precisa de um parâmetro numérico que determinará quantos documentos serão "pulados" antes de começar a retornar.
O exemplo abaixo na coleção bios pulará os dois primeiros documentos e retornará o cursor a partir daí:
Copiar
db.bios.find().skip(2)
Você pode combinar os métodos cursor.limit() e cursor.skip() :
Copiar
db.bios.find().limit(10).skip(5)
Essa operação corresponde à seguinte query SQL :
Copiar
SELECT * FROM bios LIMIT 10 OFFSET 5;
© Trybe 2020
·
Manual da Pessoa Estudante




